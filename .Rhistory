si1[, k] <- rnorm(I, sd = sqrt(lambda1[k]))
}
for (k in 1:K2) {
si2[, k] <- rnorm(n, sd = sqrt(lambda2[k]))
}
# !
# provare a stampare solo effetto ospedale si1[m, 1] * ef11(tt) + si1[m, 2] * ef12(tt)
# e solo effetto paziente si2[J_ind + j - 1, 1] * ef21(tt) + si2[J_ind + j - 1, 2] * ef22(tt)
eff_I = function(tt){
return(si1[m, 1] * ef11(tt) + si1[m, 2] * ef12(tt) + si1[m, 3] * ef13(tt) + si1[m, 4] * ef14(tt))
}
x11()
plot(seq(0, L, by=0.01), eff_I(seq(0, L, by=0.01)), type='l', ylim=c(-5,5))
print(eff_I(seq(0, L, by=0.01)))
eff_J = function(tt){
return(si2[J_ind[m]+j, 1] * ef21(tt) + si2[J_ind[m]+j, 2] * ef22(tt) + si2[J_ind[m]+j, 3] * ef23(tt) + si2[J_ind[m]+j, 4] * ef24(tt))
}
#x11()
#plot(seq(0, L, by=0.01), eff_J(seq(0, L, by=0.01)), type='l', ylim=c(-10,10))
#print(eff_J(seq(0, L, by=0.01)))
return(8 + exp(age[j]) * (eff_I(tt) + eff_J(tt)))
}
#x11()
#plot(seq(0, L, by=0.01), lambda_(seq(0, L, by=0.01)), type='l', ylim=c(0,20))
}
}
clc()
dev.off
dev.off()
#### Provo ora con il mio codice ####
set.seed(1)
I = 4 # groups
J = 2 # units
L = 1
level = 0.1
sigma = 0
balanced = TRUE
age = rnorm(I*J, 0, 0.2)
# Eigenfunctions
ef11 <- function(x) {
return(sqrt(2) * sin(1 * x * 2 * pi))
}
ef12 <- function(x) {
return(sqrt(2) * cos(1 * x * 2 * pi))
}
ef13 <- function(x) {
return(sqrt(2) * sin(1 * x * 4 * pi))
}
ef14 <- function(x) {
return(sqrt(2) * cos(1 * x * 4 * pi))
}
ef21 <- function(x) {
return(sqrt(1) * x^0)
}
ef22 <- function(x) {
return(sqrt(3) * (2 * x - 1))
}
ef23 <- function(x) {
return(sqrt(5) * (6*x^2 - 6 * x + 1))
}
ef24 <- function(x) {
return(sqrt(3) * (20*x^3 - 30*x^2 + 12 * x -1))
}
# Generate scores
if (balanced == FALSE) {
J_subj <- pmax(rpois(I, J), 1)
} else {
J_subj <- rep(J, I)
}
n <- sum(J_subj)
J_ind <- c(0, cumsum(J_subj))
for (m in 1:I) {
#J_ind <- sum(J_subj[1:(m-1)]) + 1
for (j in 1:J_subj[m]) {
lambda_ = function(tt) {
K1 <- 4#3
K2 <- 4#3
K <- K1 + K2
lambda1 <- 0.5^(0:(K1-1))
lambda2 <- 0.05^(0:(K2-1))
# Generate scores
si1 <- matrix(0, nrow = I, ncol = K1)
si2 <- matrix(0, nrow = n, ncol = K2)
for (k in 1:K1) {
si1[, k] <- rnorm(I, sd = sqrt(lambda1[k]))
}
for (k in 1:K2) {
si2[, k] <- rnorm(n, sd = sqrt(lambda2[k]))
}
# !
# provare a stampare solo effetto ospedale si1[m, 1] * ef11(tt) + si1[m, 2] * ef12(tt)
# e solo effetto paziente si2[J_ind + j - 1, 1] * ef21(tt) + si2[J_ind + j - 1, 2] * ef22(tt)
eff_I = function(tt){
return(si1[m, 1] * ef11(tt) + si1[m, 2] * ef12(tt) + si1[m, 3] * ef13(tt) + si1[m, 4] * ef14(tt))
}
x11()
plot(seq(0, L, by=0.01), eff_I(seq(0, L, by=0.01)), type='l', ylim=c(-5,5))
print(eff_I(seq(0, L, by=0.01)))
eff_J = function(tt){
return(si2[J_ind[m]+j, 1] * ef21(tt) + si2[J_ind[m]+j, 2] * ef22(tt) + si2[J_ind[m]+j, 3] * ef23(tt) + si2[J_ind[m]+j, 4] * ef24(tt))
}
#x11()
#plot(seq(0, L, by=0.01), eff_J(seq(0, L, by=0.01)), type='l', ylim=c(-10,10))
#print(eff_J(seq(0, L, by=0.01)))
return(8 + exp(age[j]) * (eff_I(tt) + eff_J(tt)))
}
#x11()
#plot(seq(0, L, by=0.01), lambda_(seq(0, L, by=0.01)), type='l', ylim=c(0,20))
}
}
#### Provo ora con il mio codice ####
set.seed(1)
I = 4 # groups
J = 2 # units
L = 1
level = 0.1
sigma = 0
balanced = TRUE
age = rnorm(I*J, 0, 0.2)
# Eigenfunctions
ef11 <- function(x) {
return(sqrt(2) * sin(1 * x * 2 * pi))
}
ef12 <- function(x) {
return(sqrt(2) * cos(1 * x * 2 * pi))
}
ef13 <- function(x) {
return(sqrt(2) * sin(1 * x * 4 * pi))
}
ef14 <- function(x) {
return(sqrt(2) * cos(1 * x * 4 * pi))
}
ef21 <- function(x) {
return(sqrt(1) * x^0)
}
ef22 <- function(x) {
return(sqrt(3) * (2 * x - 1))
}
ef23 <- function(x) {
return(sqrt(5) * (6*x^2 - 6 * x + 1))
}
ef24 <- function(x) {
return(sqrt(3) * (20*x^3 - 30*x^2 + 12 * x -1))
}
# Generate scores
if (balanced == FALSE) {
J_subj <- pmax(rpois(I, J), 1)
} else {
J_subj <- rep(J, I)
}
n <- sum(J_subj)
J_ind <- c(0, cumsum(J_subj))
for (m in 1:I) {
#J_ind <- sum(J_subj[1:(m-1)]) + 1
for (j in 1:J_subj[m]) {
lambda_ = function(tt) {
K1 <- 4#3
K2 <- 4#3
K <- K1 + K2
lambda1 <- 0.5^(0:(K1-1))
lambda2 <- 0.05^(0:(K2-1))
# Generate scores
si1 <- matrix(0, nrow = I, ncol = K1)
si2 <- matrix(0, nrow = n, ncol = K2)
for (k in 1:K1) {
si1[, k] <- rnorm(I, sd = sqrt(lambda1[k]))
}
for (k in 1:K2) {
si2[, k] <- rnorm(n, sd = sqrt(lambda2[k]))
}
# !
# provare a stampare solo effetto ospedale si1[m, 1] * ef11(tt) + si1[m, 2] * ef12(tt)
# e solo effetto paziente si2[J_ind + j - 1, 1] * ef21(tt) + si2[J_ind + j - 1, 2] * ef22(tt)
eff_I = function(tt){
return(si1[m, 1] * ef11(tt) + si1[m, 2] * ef12(tt) + si1[m, 3] * ef13(tt) + si1[m, 4] * ef14(tt))
}
x11()
plot(seq(0, L, by=0.01), eff_I(seq(0, L, by=0.01)), type='l', ylim=c(-5,5))
print(eff_I(seq(0, L, by=0.01)))
eff_J = function(tt){
return(si2[J_ind[m]+j, 1] * ef21(tt) + si2[J_ind[m]+j, 2] * ef22(tt) + si2[J_ind[m]+j, 3] * ef23(tt) + si2[J_ind[m]+j, 4] * ef24(tt))
}
#x11()
#plot(seq(0, L, by=0.01), eff_J(seq(0, L, by=0.01)), type='l', ylim=c(-10,10))
#print(eff_J(seq(0, L, by=0.01)))
return(8 + exp(age[j]) * (eff_I(tt) + eff_J(tt)))
}
#x11()
#plot(seq(0, L, by=0.01), lambda_(seq(0, L, by=0.01)), type='l', ylim=c(0,20))
}
}
set.seed(1)
I = 4 # groups
J = 2 # units
L = 1
level = 0.1
sigma = 0
balanced = TRUE
age = rnorm(I*J, 0, 0.2)
# Eigenfunctions
ef11 <- function(x) {
return(sqrt(2) * sin(1 * x * 2 * pi))
}
ef12 <- function(x) {
return(sqrt(2) * cos(1 * x * 2 * pi))
}
ef13 <- function(x) {
return(sqrt(2) * sin(1 * x * 4 * pi))
}
ef14 <- function(x) {
return(sqrt(2) * cos(1 * x * 4 * pi))
}
ef21 <- function(x) {
return(sqrt(1) * x^0)
}
ef22 <- function(x) {
return(sqrt(3) * (2 * x - 1))
}
ef23 <- function(x) {
return(sqrt(5) * (6*x^2 - 6 * x + 1))
}
ef24 <- function(x) {
return(sqrt(3) * (20*x^3 - 30*x^2 + 12 * x -1))
}
# Generate scores
if (balanced == FALSE) {
J_subj <- pmax(rpois(I, J), 1)
} else {
J_subj <- rep(J, I)
}
n <- sum(J_subj)
J_ind <- c(0, cumsum(J_subj))
for (m in 1:I) {
#J_ind <- sum(J_subj[1:(m-1)]) + 1
for (j in 1:J_subj[m]) {
lambda_ = function(tt) {
K1 <- 4#3
K2 <- 4#3
K <- K1 + K2
lambda1 <- 0.5^(0:(K1-1))
lambda2 <- 0.05^(0:(K2-1))
# Generate scores
si1 <- matrix(0, nrow = I, ncol = K1)
si2 <- matrix(0, nrow = n, ncol = K2)
for (k in 1:K1) {
si1[, k] <- rnorm(I, sd = sqrt(lambda1[k]))
}
for (k in 1:K2) {
si2[, k] <- rnorm(n, sd = sqrt(lambda2[k]))
}
# !
# provare a stampare solo effetto ospedale si1[m, 1] * ef11(tt) + si1[m, 2] * ef12(tt)
# e solo effetto paziente si2[J_ind + j - 1, 1] * ef21(tt) + si2[J_ind + j - 1, 2] * ef22(tt)
eff_I = function(tt){
return(si1[m, 1] * ef11(tt) + si1[m, 2] * ef12(tt) + si1[m, 3] * ef13(tt) + si1[m, 4] * ef14(tt))
}
x11()
plot(seq(0, L, by=0.01), eff_I(seq(0, L, by=0.01)), type='l', ylim=c(-5,5))
print(eff_I(seq(0, L, by=0.01)))
eff_J = function(tt){
return(si2[J_ind[m]+j, 1] * ef21(tt) + si2[J_ind[m]+j, 2] * ef22(tt) + si2[J_ind[m]+j, 3] * ef23(tt) + si2[J_ind[m]+j, 4] * ef24(tt))
}
#x11()
#plot(seq(0, L, by=0.01), eff_J(seq(0, L, by=0.01)), type='l', ylim=c(-10,10))
#print(eff_J(seq(0, L, by=0.01)))
return(8 + exp(age[j]) * (eff_I(tt) + eff_J(tt)))
}
#x11()
#plot(seq(0, L, by=0.01), lambda_(seq(0, L, by=0.01)), type='l', ylim=c(0,20))
}
}
#### Provo ora con il mio codice ####
set.seed(1)
I = 4 # groups
J = 2 # units
L = 1
level = 0.1
sigma = 0
balanced = TRUE
age = rnorm(I*J, 0, 0.2)
# Eigenfunctions
ef11 <- function(x) {
return(sqrt(2) * sin(1 * x * 2 * pi))
}
ef12 <- function(x) {
return(sqrt(2) * cos(1 * x * 2 * pi))
}
ef13 <- function(x) {
return(sqrt(2) * sin(1 * x * 4 * pi))
}
ef14 <- function(x) {
return(sqrt(2) * cos(1 * x * 4 * pi))
}
ef21 <- function(x) {
return(sqrt(1) * x^0)
}
ef22 <- function(x) {
return(sqrt(3) * (2 * x - 1))
}
ef23 <- function(x) {
return(sqrt(5) * (6*x^2 - 6 * x + 1))
}
ef24 <- function(x) {
return(sqrt(3) * (20*x^3 - 30*x^2 + 12 * x -1))
}
# Generate scores
if (balanced == FALSE) {
J_subj <- pmax(rpois(I, J), 1)
} else {
J_subj <- rep(J, I)
}
n <- sum(J_subj)
J_ind <- c(0, cumsum(J_subj))
for (m in 1:I) {
#J_ind <- sum(J_subj[1:(m-1)]) + 1
for (j in 1:J_subj[m]) {
lambda_ = function(tt) {
K1 <- 4#3
K2 <- 4#3
K <- K1 + K2
lambda1 <- 0.5^(0:(K1-1))
lambda2 <- 0.05^(0:(K2-1))
# Generate scores
si1 <- matrix(0, nrow = I, ncol = K1)
si2 <- matrix(0, nrow = n, ncol = K2)
for (k in 1:K1) {
si1[, k] <- rnorm(I, sd = sqrt(lambda1[k]))
}
for (k in 1:K2) {
si2[, k] <- rnorm(n, sd = sqrt(lambda2[k]))
}
# !
# provare a stampare solo effetto ospedale si1[m, 1] * ef11(tt) + si1[m, 2] * ef12(tt)
# e solo effetto paziente si2[J_ind + j - 1, 1] * ef21(tt) + si2[J_ind + j - 1, 2] * ef22(tt)
eff_I = function(tt){
return(si1[m, 1] * ef11(tt) + si1[m, 2] * ef12(tt) + si1[m, 3] * ef13(tt) + si1[m, 4] * ef14(tt))
}
#x11()
#plot(seq(0, L, by=0.01), eff_I(seq(0, L, by=0.01)), type='l', ylim=c(-5,5))
print(eff_I(seq(0, L, by=0.01)))
eff_J = function(tt){
return(si2[J_ind[m]+j, 1] * ef21(tt) + si2[J_ind[m]+j, 2] * ef22(tt) + si2[J_ind[m]+j, 3] * ef23(tt) + si2[J_ind[m]+j, 4] * ef24(tt))
}
#x11()
#plot(seq(0, L, by=0.01), eff_J(seq(0, L, by=0.01)), type='l', ylim=c(-10,10))
#print(eff_J(seq(0, L, by=0.01)))
return(8 + exp(age[j]) * (eff_I(tt) + eff_J(tt)))
}
#x11()
#plot(seq(0, L, by=0.01), lambda_(seq(0, L, by=0.01)), type='l', ylim=c(0,20))
}
}
#### Provo ora con il mio codice ####
set.seed(1)
I = 4 # groups
J = 2 # units
L = 1
level = 0.1
sigma = 0
balanced = TRUE
age = rnorm(I*J, 0, 0.2)
# Eigenfunctions
ef11 <- function(x) {
return(sqrt(2) * sin(1 * x * 2 * pi))
}
ef12 <- function(x) {
return(sqrt(2) * cos(1 * x * 2 * pi))
}
ef13 <- function(x) {
return(sqrt(2) * sin(1 * x * 4 * pi))
}
ef14 <- function(x) {
return(sqrt(2) * cos(1 * x * 4 * pi))
}
ef21 <- function(x) {
return(sqrt(1) * x^0)
}
ef22 <- function(x) {
return(sqrt(3) * (2 * x - 1))
}
ef23 <- function(x) {
return(sqrt(5) * (6*x^2 - 6 * x + 1))
}
ef24 <- function(x) {
return(sqrt(3) * (20*x^3 - 30*x^2 + 12 * x -1))
}
# Generate scores
if (balanced == FALSE) {
J_subj <- pmax(rpois(I, J), 1)
} else {
J_subj <- rep(J, I)
}
n <- sum(J_subj)
J_ind <- c(0, cumsum(J_subj))
for (m in 1:I) {
#J_ind <- sum(J_subj[1:(m-1)]) + 1
for (j in 1:J_subj[m]) {
lambda_ = function(tt) {
K1 <- 4#3
K2 <- 4#3
K <- K1 + K2
lambda1 <- 0.5^(0:(K1-1))
lambda2 <- 0.05^(0:(K2-1))
# Generate scores
si1 <- matrix(0, nrow = I, ncol = K1)
si2 <- matrix(0, nrow = n, ncol = K2)
for (k in 1:K1) {
si1[, k] <- rnorm(I, sd = sqrt(lambda1[k]))
}
for (k in 1:K2) {
si2[, k] <- rnorm(n, sd = sqrt(lambda2[k]))
}
# !
# provare a stampare solo effetto ospedale si1[m, 1] * ef11(tt) + si1[m, 2] * ef12(tt)
# e solo effetto paziente si2[J_ind + j - 1, 1] * ef21(tt) + si2[J_ind + j - 1, 2] * ef22(tt)
eff_I = function(tt){
return(si1[m, 1] * ef11(tt) + si1[m, 2] * ef12(tt) + si1[m, 3] * ef13(tt) + si1[m, 4] * ef14(tt))
}
#x11()
#plot(seq(0, L, by=0.01), eff_I(seq(0, L, by=0.01)), type='l', ylim=c(-5,5))
print(eff_I(seq(0, L, by=0.01)))
eff_J = function(tt){
return(si2[J_ind[m]+j, 1] * ef21(tt) + si2[J_ind[m]+j, 2] * ef22(tt) + si2[J_ind[m]+j, 3] * ef23(tt) + si2[J_ind[m]+j, 4] * ef24(tt))
}
#x11()
#plot(seq(0, L, by=0.01), eff_J(seq(0, L, by=0.01)), type='l', ylim=c(-10,10))
#print(eff_J(seq(0, L, by=0.01)))
return(8 + exp(age[j]) * (eff_I(tt) + eff_J(tt)))
}
#x11()
#plot(seq(0, L, by=0.01), lambda_(seq(0, L, by=0.01)), type='l', ylim=c(0,20))
}
}
for (m in 1:I) {
#J_ind <- sum(J_subj[1:(m-1)]) + 1
for (j in 1:J_subj[m]) {
lambda_ = function(tt) {
K1 <- 4#3
K2 <- 4#3
K <- K1 + K2
lambda1 <- 0.5^(0:(K1-1))
lambda2 <- 0.05^(0:(K2-1))
# Generate scores
si1 <- matrix(0, nrow = I, ncol = K1)
si2 <- matrix(0, nrow = n, ncol = K2)
for (k in 1:K1) {
si1[, k] <- rnorm(I, sd = sqrt(lambda1[k]))
}
for (k in 1:K2) {
si2[, k] <- rnorm(n, sd = sqrt(lambda2[k]))
}
# !
# provare a stampare solo effetto ospedale si1[m, 1] * ef11(tt) + si1[m, 2] * ef12(tt)
# e solo effetto paziente si2[J_ind + j - 1, 1] * ef21(tt) + si2[J_ind + j - 1, 2] * ef22(tt)
eff_I = function(tt){
return(si1[m, 1] * ef11(tt) + si1[m, 2] * ef12(tt) + si1[m, 3] * ef13(tt) + si1[m, 4] * ef14(tt))
}
#x11()
#plot(seq(0, L, by=0.01), eff_I(seq(0, L, by=0.01)), type='l', ylim=c(-5,5))
#print(eff_I(seq(0, L, by=0.01)))
eff_J = function(tt){
return(si2[J_ind[m]+j, 1] * ef21(tt) + si2[J_ind[m]+j, 2] * ef22(tt) + si2[J_ind[m]+j, 3] * ef23(tt) + si2[J_ind[m]+j, 4] * ef24(tt))
}
#x11()
#plot(seq(0, L, by=0.01), eff_J(seq(0, L, by=0.01)), type='l', ylim=c(-10,10))
print(eff_J(seq(0, L, by=0.01)))
return(8 + exp(age[j]) * (eff_I(tt) + eff_J(tt)))
}
#x11()
#plot(seq(0, L, by=0.01), lambda_(seq(0, L, by=0.01)), type='l', ylim=c(0,20))
}
}
J_ind <- c(0, cumsum(J_subj))
for (m in 1:I) {
#J_ind <- sum(J_subj[1:(m-1)]) + 1
for (j in 1:J_subj[m]) {
lambda_ = function(tt) {
K1 <- 4#3
K2 <- 4#3
K <- K1 + K2
lambda1 <- 0.5^(0:(K1-1))
lambda2 <- 0.05^(0:(K2-1))
# Generate scores
si1 <- matrix(0, nrow = I, ncol = K1)
si2 <- matrix(0, nrow = n, ncol = K2)
for (k in 1:K1) {
si1[, k] <- rnorm(I, sd = sqrt(lambda1[k]))
}
for (k in 1:K2) {
si2[, k] <- rnorm(n, sd = sqrt(lambda2[k]))
}
# !
# provare a stampare solo effetto ospedale si1[m, 1] * ef11(tt) + si1[m, 2] * ef12(tt)
# e solo effetto paziente si2[J_ind + j - 1, 1] * ef21(tt) + si2[J_ind + j - 1, 2] * ef22(tt)
eff_I = function(tt){
return(si1[m, 1] * ef11(tt) + si1[m, 2] * ef12(tt) + si1[m, 3] * ef13(tt) + si1[m, 4] * ef14(tt))
}
#x11()
#plot(seq(0, L, by=0.01), eff_I(seq(0, L, by=0.01)), type='l', ylim=c(-5,5))
print(eff_I(seq(0, L, by=0.01)))
eff_J = function(tt){
return(si2[J_ind[m]+j, 1] * ef21(tt) + si2[J_ind[m]+j, 2] * ef22(tt) + si2[J_ind[m]+j, 3] * ef23(tt) + si2[J_ind[m]+j, 4] * ef24(tt))
}
#x11()
#plot(seq(0, L, by=0.01), eff_J(seq(0, L, by=0.01)), type='l', ylim=c(-10,10))
print(eff_J(seq(0, L, by=0.01)))
return(8 + exp(age[j]) * (eff_I(tt) + eff_J(tt)))
}
#x11()
#plot(seq(0, L, by=0.01), lambda_(seq(0, L, by=0.01)), type='l', ylim=c(0,20))
}
}
